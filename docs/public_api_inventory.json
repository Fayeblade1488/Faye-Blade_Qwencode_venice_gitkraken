{
  "inventory": [
    {
      "file": "auto_config.py",
      "type": "function",
      "name": "main",
      "line": 20,
      "has_docstring": true,
      "docstring_preview": "Parses command-line arguments and runs auto-configuration tasks.\n\n    This script provides command-l",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "class",
      "name": "ExternalAPIIntegrator",
      "line": 24,
      "has_docstring": true,
      "docstring_preview": "Integrates with external AI providers using configuration files.\n\n    This class loads provider deta",
      "methods": []
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "load_providers_from_config",
      "line": 69,
      "has_docstring": true,
      "docstring_preview": "Loads provider configurations from the YAML file.\n\n        Parses the YAML file specified in `provid",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "get_available_providers",
      "line": 98,
      "has_docstring": true,
      "docstring_preview": "Gets a list of available provider IDs from the loaded configuration.\n\n        Returns:\n            A",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "get_provider_info",
      "line": 106,
      "has_docstring": true,
      "docstring_preview": "Gets the configuration information for a specific provider.\n\n        Args:\n            provider_id: ",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "get_provider_models",
      "line": 118,
      "has_docstring": true,
      "docstring_preview": "Gets the list of models available for a specific provider.\n\n        Args:\n            provider_id: T",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "get_default_provider_api_key",
      "line": 134,
      "has_docstring": true,
      "docstring_preview": "Retrieves the API key for a provider from the configuration.\n\n        It prioritizes keys of type 'o",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "chat_completion",
      "line": 163,
      "has_docstring": true,
      "docstring_preview": "Performs a chat completion using a specified external provider.\n\n        This method constructs and ",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "method",
      "class": "ExternalAPIIntegrator",
      "name": "list_all_models",
      "line": 278,
      "has_docstring": true,
      "docstring_preview": "Lists all models for all configured providers.\n\n        Returns:\n            A dictionary mapping ea",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "main",
      "line": 291,
      "has_docstring": true,
      "docstring_preview": "Main function to test the ExternalAPIIntegrator.",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "load_providers_from_config",
      "line": 69,
      "has_docstring": true,
      "docstring_preview": "Loads provider configurations from the YAML file.\n\n        Parses the YAML file specified in `provid",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "get_available_providers",
      "line": 98,
      "has_docstring": true,
      "docstring_preview": "Gets a list of available provider IDs from the loaded configuration.\n\n        Returns:\n            A",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "get_provider_info",
      "line": 106,
      "has_docstring": true,
      "docstring_preview": "Gets the configuration information for a specific provider.\n\n        Args:\n            provider_id: ",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "get_provider_models",
      "line": 118,
      "has_docstring": true,
      "docstring_preview": "Gets the list of models available for a specific provider.\n\n        Args:\n            provider_id: T",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "get_default_provider_api_key",
      "line": 134,
      "has_docstring": true,
      "docstring_preview": "Retrieves the API key for a provider from the configuration.\n\n        It prioritizes keys of type 'o",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "chat_completion",
      "line": 163,
      "has_docstring": true,
      "docstring_preview": "Performs a chat completion using a specified external provider.\n\n        This method constructs and ",
      "is_async": false
    },
    {
      "file": "external_api_integrator.py",
      "type": "function",
      "name": "list_all_models",
      "line": 278,
      "has_docstring": true,
      "docstring_preview": "Lists all models for all configured providers.\n\n        Returns:\n            A dictionary mapping ea",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "class",
      "name": "GitKrakenCLI",
      "line": 18,
      "has_docstring": true,
      "docstring_preview": "A wrapper class to interact with the GitKraken CLI (`gk`).\n\n    This class provides Python methods t",
      "methods": []
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "is_installed",
      "line": 66,
      "has_docstring": true,
      "docstring_preview": "Checks if the GitKraken CLI is installed and found.\n\n        Returns:\n            True if the `gk` e",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "run_command",
      "line": 74,
      "has_docstring": true,
      "docstring_preview": "Runs a GitKraken CLI command and captures its output.\n\n        This is the primary method for execut",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_changelog",
      "line": 132,
      "has_docstring": true,
      "docstring_preview": "Generates a changelog between two commits or branches using AI.\n\n        Args:\n            base: The",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_commit",
      "line": 153,
      "has_docstring": true,
      "docstring_preview": "Generates a new commit message with AI.\n\n        Args:\n            add_description: If True, include",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_explain_branch",
      "line": 172,
      "has_docstring": true,
      "docstring_preview": "Uses AI to explain the changes in a branch.\n\n        Args:\n            branch: The branch to explain",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_explain_commit",
      "line": 190,
      "has_docstring": true,
      "docstring_preview": "Uses AI to explain the changes in a specific commit.\n\n        Args:\n            commit_sha: The SHA ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_pr_create",
      "line": 206,
      "has_docstring": true,
      "docstring_preview": "Generates a new pull request with AI.\n\n        Args:\n            path: The path to the repository.\n\n",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_resolve",
      "line": 221,
      "has_docstring": true,
      "docstring_preview": "Uses AI to resolve git conflicts.\n\n        Args:\n            path: The path to the repository with c",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "ai_tokens",
      "line": 236,
      "has_docstring": true,
      "docstring_preview": "Outputs the number of GitKraken AI tokens used.\n\n        Returns:\n            A dictionary containin",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "auth_login",
      "line": 245,
      "has_docstring": true,
      "docstring_preview": "Logs into a GitKraken account.\n\n        Args:\n            token: An optional authentication token to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "auth_logout",
      "line": 260,
      "has_docstring": true,
      "docstring_preview": "Logs out from the current GitKraken account.\n\n        Returns:\n            A dictionary containing t",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "graph",
      "line": 269,
      "has_docstring": true,
      "docstring_preview": "Displays the commit graph for the current repository.\n\n        Args:\n            gitkraken: Open the",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "issue_assign",
      "line": 297,
      "has_docstring": true,
      "docstring_preview": "Assigns an issue to a user.\n\n        Args:\n            provider: The issue tracking provider (e.g., ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "issue_list",
      "line": 319,
      "has_docstring": true,
      "docstring_preview": "Shows a list of issues from the specified provider.\n\n        Args:\n            provider: The issue t",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "mcp_start",
      "line": 331,
      "has_docstring": true,
      "docstring_preview": "Starts a local MCP (Model Context Protocol) server.\n\n        Args:\n            readonly: If True, st",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "mcp_install",
      "line": 346,
      "has_docstring": true,
      "docstring_preview": "Installs the GitKraken MCP server in an MCP client.\n\n        Args:\n            platform: The target ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "mcp_uninstall",
      "line": 362,
      "has_docstring": true,
      "docstring_preview": "Uninstalls the GitKraken MCP server.\n\n        Args:\n            platform: The target platform for un",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "organization_list",
      "line": 379,
      "has_docstring": true,
      "docstring_preview": "Lists all GitKraken organizations the user is a member of.\n\n        Returns:\n            A dictionar",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "organization_set",
      "line": 387,
      "has_docstring": true,
      "docstring_preview": "Sets the default GitKraken organization.\n\n        Args:\n            name: The name of the organizati",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "organization_unset",
      "line": 398,
      "has_docstring": true,
      "docstring_preview": "Clears the default GitKraken organization setting.\n\n        Returns:\n            A dictionary contai",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "provider_add",
      "line": 407,
      "has_docstring": true,
      "docstring_preview": "Adds an authentication token for a provider.\n\n        Args:\n            provider: The provider to ad",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "provider_list",
      "line": 419,
      "has_docstring": true,
      "docstring_preview": "Lists all configured provider tokens.\n\n        Returns:\n            A dictionary containing the resu",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "provider_remove",
      "line": 427,
      "has_docstring": true,
      "docstring_preview": "Removes an authentication token for a provider.\n\n        Args:\n            provider: The provider to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "version",
      "line": 439,
      "has_docstring": true,
      "docstring_preview": "Prints the version number of the GitKraken CLI.\n\n        Returns:\n            A dictionary containin",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_list",
      "line": 448,
      "has_docstring": true,
      "docstring_preview": "Lists all work items.\n\n        Returns:\n            A dictionary containing the result of the comman",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_info",
      "line": 456,
      "has_docstring": true,
      "docstring_preview": "Views information about a specific work item.\n\n        Args:\n            name: The name of the work ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_start",
      "line": 471,
      "has_docstring": true,
      "docstring_preview": "Starts a new work item.\n\n        Args:\n            name: The name for the new work item.\n           ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_set",
      "line": 500,
      "has_docstring": true,
      "docstring_preview": "Sets the active work item.\n\n        Args:\n            name: The name of the work item to set as acti",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_branch",
      "line": 511,
      "has_docstring": true,
      "docstring_preview": "Creates a new branch for the current work item.\n\n        Args:\n            base_branch: The base bra",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_commit",
      "line": 533,
      "has_docstring": true,
      "docstring_preview": "Commits changes for the current work item.\n\n        Args:\n            add_description: If True, adds",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_push",
      "line": 558,
      "has_docstring": true,
      "docstring_preview": "Pushes repository changes for the current work item.\n\n        Args:\n            force: If True, perf",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_pr_create",
      "line": 583,
      "has_docstring": true,
      "docstring_preview": "Creates a new pull request for the current work item.\n\n        Args:\n            title: The title of",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_pr_merge",
      "line": 614,
      "has_docstring": true,
      "docstring_preview": "Merges existing pull requests for the current work item.\n\n        Args:\n            include_repos: C",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_delete",
      "line": 632,
      "has_docstring": true,
      "docstring_preview": "Deletes a work item.\n\n        Args:\n            name: The name of the work item to delete.\n         ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "work_update",
      "line": 648,
      "has_docstring": true,
      "docstring_preview": "Updates a work item.\n\n        Returns:\n            A dictionary containing the result of the command",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_list",
      "line": 657,
      "has_docstring": true,
      "docstring_preview": "Lists all workspaces.\n\n        Returns:\n            A dictionary containing the result of the comman",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_info",
      "line": 665,
      "has_docstring": true,
      "docstring_preview": "Views information about a workspace.\n\n        Args:\n            name: The name of the workspace.\n\n  ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_create",
      "line": 680,
      "has_docstring": true,
      "docstring_preview": "Creates a new workspace.\n\n        Args:\n            name: The name of the new workspace.\n           ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_set",
      "line": 718,
      "has_docstring": true,
      "docstring_preview": "Sets the default workspace.\n\n        Args:\n            name: The name of the workspace to set as def",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_unset",
      "line": 729,
      "has_docstring": true,
      "docstring_preview": "Clears the active workspace setting.\n\n        Returns:\n            A dictionary containing the resul",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_update",
      "line": 737,
      "has_docstring": true,
      "docstring_preview": "Updates an existing workspace.\n\n        Args:\n            name: The current name of the workspace to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_delete",
      "line": 790,
      "has_docstring": true,
      "docstring_preview": "Deletes a workspace.\n\n        Args:\n            name: The name of the workspace to delete.\n         ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_refresh",
      "line": 806,
      "has_docstring": true,
      "docstring_preview": "Synchronizes the state of a workspace.\n\n        Args:\n            name: The name of the workspace to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "method",
      "class": "GitKrakenCLI",
      "name": "workspace_clone",
      "line": 831,
      "has_docstring": true,
      "docstring_preview": "Clones a workspace to a local directory.\n\n        Args:\n            name: The name of the workspace ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "is_installed",
      "line": 66,
      "has_docstring": true,
      "docstring_preview": "Checks if the GitKraken CLI is installed and found.\n\n        Returns:\n            True if the `gk` e",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "run_command",
      "line": 74,
      "has_docstring": true,
      "docstring_preview": "Runs a GitKraken CLI command and captures its output.\n\n        This is the primary method for execut",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_changelog",
      "line": 132,
      "has_docstring": true,
      "docstring_preview": "Generates a changelog between two commits or branches using AI.\n\n        Args:\n            base: The",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_commit",
      "line": 153,
      "has_docstring": true,
      "docstring_preview": "Generates a new commit message with AI.\n\n        Args:\n            add_description: If True, include",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_explain_branch",
      "line": 172,
      "has_docstring": true,
      "docstring_preview": "Uses AI to explain the changes in a branch.\n\n        Args:\n            branch: The branch to explain",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_explain_commit",
      "line": 190,
      "has_docstring": true,
      "docstring_preview": "Uses AI to explain the changes in a specific commit.\n\n        Args:\n            commit_sha: The SHA ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_pr_create",
      "line": 206,
      "has_docstring": true,
      "docstring_preview": "Generates a new pull request with AI.\n\n        Args:\n            path: The path to the repository.\n\n",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_resolve",
      "line": 221,
      "has_docstring": true,
      "docstring_preview": "Uses AI to resolve git conflicts.\n\n        Args:\n            path: The path to the repository with c",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "ai_tokens",
      "line": 236,
      "has_docstring": true,
      "docstring_preview": "Outputs the number of GitKraken AI tokens used.\n\n        Returns:\n            A dictionary containin",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "auth_login",
      "line": 245,
      "has_docstring": true,
      "docstring_preview": "Logs into a GitKraken account.\n\n        Args:\n            token: An optional authentication token to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "auth_logout",
      "line": 260,
      "has_docstring": true,
      "docstring_preview": "Logs out from the current GitKraken account.\n\n        Returns:\n            A dictionary containing t",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "graph",
      "line": 269,
      "has_docstring": true,
      "docstring_preview": "Displays the commit graph for the current repository.\n\n        Args:\n            gitkraken: Open the",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "issue_assign",
      "line": 297,
      "has_docstring": true,
      "docstring_preview": "Assigns an issue to a user.\n\n        Args:\n            provider: The issue tracking provider (e.g., ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "issue_list",
      "line": 319,
      "has_docstring": true,
      "docstring_preview": "Shows a list of issues from the specified provider.\n\n        Args:\n            provider: The issue t",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "mcp_start",
      "line": 331,
      "has_docstring": true,
      "docstring_preview": "Starts a local MCP (Model Context Protocol) server.\n\n        Args:\n            readonly: If True, st",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "mcp_install",
      "line": 346,
      "has_docstring": true,
      "docstring_preview": "Installs the GitKraken MCP server in an MCP client.\n\n        Args:\n            platform: The target ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "mcp_uninstall",
      "line": 362,
      "has_docstring": true,
      "docstring_preview": "Uninstalls the GitKraken MCP server.\n\n        Args:\n            platform: The target platform for un",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "organization_list",
      "line": 379,
      "has_docstring": true,
      "docstring_preview": "Lists all GitKraken organizations the user is a member of.\n\n        Returns:\n            A dictionar",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "organization_set",
      "line": 387,
      "has_docstring": true,
      "docstring_preview": "Sets the default GitKraken organization.\n\n        Args:\n            name: The name of the organizati",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "organization_unset",
      "line": 398,
      "has_docstring": true,
      "docstring_preview": "Clears the default GitKraken organization setting.\n\n        Returns:\n            A dictionary contai",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "provider_add",
      "line": 407,
      "has_docstring": true,
      "docstring_preview": "Adds an authentication token for a provider.\n\n        Args:\n            provider: The provider to ad",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "provider_list",
      "line": 419,
      "has_docstring": true,
      "docstring_preview": "Lists all configured provider tokens.\n\n        Returns:\n            A dictionary containing the resu",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "provider_remove",
      "line": 427,
      "has_docstring": true,
      "docstring_preview": "Removes an authentication token for a provider.\n\n        Args:\n            provider: The provider to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "version",
      "line": 439,
      "has_docstring": true,
      "docstring_preview": "Prints the version number of the GitKraken CLI.\n\n        Returns:\n            A dictionary containin",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_list",
      "line": 448,
      "has_docstring": true,
      "docstring_preview": "Lists all work items.\n\n        Returns:\n            A dictionary containing the result of the comman",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_info",
      "line": 456,
      "has_docstring": true,
      "docstring_preview": "Views information about a specific work item.\n\n        Args:\n            name: The name of the work ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_start",
      "line": 471,
      "has_docstring": true,
      "docstring_preview": "Starts a new work item.\n\n        Args:\n            name: The name for the new work item.\n           ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_set",
      "line": 500,
      "has_docstring": true,
      "docstring_preview": "Sets the active work item.\n\n        Args:\n            name: The name of the work item to set as acti",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_branch",
      "line": 511,
      "has_docstring": true,
      "docstring_preview": "Creates a new branch for the current work item.\n\n        Args:\n            base_branch: The base bra",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_commit",
      "line": 533,
      "has_docstring": true,
      "docstring_preview": "Commits changes for the current work item.\n\n        Args:\n            add_description: If True, adds",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_push",
      "line": 558,
      "has_docstring": true,
      "docstring_preview": "Pushes repository changes for the current work item.\n\n        Args:\n            force: If True, perf",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_pr_create",
      "line": 583,
      "has_docstring": true,
      "docstring_preview": "Creates a new pull request for the current work item.\n\n        Args:\n            title: The title of",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_pr_merge",
      "line": 614,
      "has_docstring": true,
      "docstring_preview": "Merges existing pull requests for the current work item.\n\n        Args:\n            include_repos: C",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_delete",
      "line": 632,
      "has_docstring": true,
      "docstring_preview": "Deletes a work item.\n\n        Args:\n            name: The name of the work item to delete.\n         ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "work_update",
      "line": 648,
      "has_docstring": true,
      "docstring_preview": "Updates a work item.\n\n        Returns:\n            A dictionary containing the result of the command",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_list",
      "line": 657,
      "has_docstring": true,
      "docstring_preview": "Lists all workspaces.\n\n        Returns:\n            A dictionary containing the result of the comman",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_info",
      "line": 665,
      "has_docstring": true,
      "docstring_preview": "Views information about a workspace.\n\n        Args:\n            name: The name of the workspace.\n\n  ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_create",
      "line": 680,
      "has_docstring": true,
      "docstring_preview": "Creates a new workspace.\n\n        Args:\n            name: The name of the new workspace.\n           ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_set",
      "line": 718,
      "has_docstring": true,
      "docstring_preview": "Sets the default workspace.\n\n        Args:\n            name: The name of the workspace to set as def",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_unset",
      "line": 729,
      "has_docstring": true,
      "docstring_preview": "Clears the active workspace setting.\n\n        Returns:\n            A dictionary containing the resul",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_update",
      "line": 737,
      "has_docstring": true,
      "docstring_preview": "Updates an existing workspace.\n\n        Args:\n            name: The current name of the workspace to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_delete",
      "line": 790,
      "has_docstring": true,
      "docstring_preview": "Deletes a workspace.\n\n        Args:\n            name: The name of the workspace to delete.\n         ",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_refresh",
      "line": 806,
      "has_docstring": true,
      "docstring_preview": "Synchronizes the state of a workspace.\n\n        Args:\n            name: The name of the workspace to",
      "is_async": false
    },
    {
      "file": "gitkraken_integration.py",
      "type": "function",
      "name": "workspace_clone",
      "line": 831,
      "has_docstring": true,
      "docstring_preview": "Clones a workspace to a local directory.\n\n        Args:\n            name: The name of the workspace ",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "class",
      "name": "QwenCLIIntegrator",
      "line": 21,
      "has_docstring": true,
      "docstring_preview": "Orchestrates integrations with GitKraken, Venice AI, and other external APIs.\n\n    This class serves",
      "methods": []
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "gitkraken_command",
      "line": 50,
      "has_docstring": true,
      "docstring_preview": "Executes a GitKraken CLI command.\n\n        This method acts as a dispatcher, mapping a command strin",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "venice_generate_image",
      "line": 153,
      "has_docstring": true,
      "docstring_preview": "Generates an image using the Venice AI service.\n\n        This is a wrapper around the `generate_imag",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "venice_upscale_image",
      "line": 184,
      "has_docstring": true,
      "docstring_preview": "Upscales an image using the Venice AI service.\n\n        This is a wrapper around the `upscale_image_",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "list_available_models",
      "line": 214,
      "has_docstring": true,
      "docstring_preview": "Lists available models from the Venice AI service.\n\n        This method fetches all models and also ",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "external_chat_completion",
      "line": 245,
      "has_docstring": true,
      "docstring_preview": "Performs a chat completion using an external API provider.\n\n        This method initializes the `Ext",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "list_external_providers",
      "line": 280,
      "has_docstring": true,
      "docstring_preview": "Lists available external API providers and their models.\n\n        This method initializes the `Exter",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "verify_venice_api",
      "line": 312,
      "has_docstring": true,
      "docstring_preview": "Verifies a Venice AI API key.\n\n        This is a wrapper around the `verify_api_key` method in the\n ",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "method",
      "class": "QwenCLIIntegrator",
      "name": "update_venice_config",
      "line": 347,
      "has_docstring": true,
      "docstring_preview": "Updates the Raycast configuration with the latest Venice AI models.\n\n        This is a wrapper aroun",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "main",
      "line": 378,
      "has_docstring": true,
      "docstring_preview": "The main entry point for the command-line interface.\n\n    This function parses command-line argument",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "gitkraken_command",
      "line": 50,
      "has_docstring": true,
      "docstring_preview": "Executes a GitKraken CLI command.\n\n        This method acts as a dispatcher, mapping a command strin",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "venice_generate_image",
      "line": 153,
      "has_docstring": true,
      "docstring_preview": "Generates an image using the Venice AI service.\n\n        This is a wrapper around the `generate_imag",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "venice_upscale_image",
      "line": 184,
      "has_docstring": true,
      "docstring_preview": "Upscales an image using the Venice AI service.\n\n        This is a wrapper around the `upscale_image_",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "list_available_models",
      "line": 214,
      "has_docstring": true,
      "docstring_preview": "Lists available models from the Venice AI service.\n\n        This method fetches all models and also ",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "external_chat_completion",
      "line": 245,
      "has_docstring": true,
      "docstring_preview": "Performs a chat completion using an external API provider.\n\n        This method initializes the `Ext",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "list_external_providers",
      "line": 280,
      "has_docstring": true,
      "docstring_preview": "Lists available external API providers and their models.\n\n        This method initializes the `Exter",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "verify_venice_api",
      "line": 312,
      "has_docstring": true,
      "docstring_preview": "Verifies a Venice AI API key.\n\n        This is a wrapper around the `verify_api_key` method in the\n ",
      "is_async": false
    },
    {
      "file": "qwen_cli_integrator.py",
      "type": "function",
      "name": "update_venice_config",
      "line": 347,
      "has_docstring": true,
      "docstring_preview": "Updates the Raycast configuration with the latest Venice AI models.\n\n        This is a wrapper aroun",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "class",
      "name": "TestQwenCLIIntegration",
      "line": 22,
      "has_docstring": true,
      "docstring_preview": "Test suite for the Qwen CLI Integrator.",
      "methods": []
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "setUp",
      "line": 25,
      "has_docstring": true,
      "docstring_preview": "Set up for each test.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "tearDown",
      "line": 32,
      "has_docstring": true,
      "docstring_preview": "Tear down after each test.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "test_help_output",
      "line": 36,
      "has_docstring": true,
      "docstring_preview": "Test that help output works for all main commands.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "test_venice_generate_image_call",
      "line": 62,
      "has_docstring": true,
      "docstring_preview": "Test that calling venice generate command correctly calls the generator and returns the right data.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "test_gitkraken_command_dispatch",
      "line": 78,
      "has_docstring": true,
      "docstring_preview": "Test that GitKraken commands are dispatched and return correct data.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "test_list_available_models_integrator",
      "line": 95,
      "has_docstring": true,
      "docstring_preview": "Test that the integrator correctly calls and processes list_models.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "method",
      "class": "TestQwenCLIIntegration",
      "name": "test_update_venice_config_call",
      "line": 116,
      "has_docstring": true,
      "docstring_preview": "Test that the update_venice_config call is correctly handled.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "setUp",
      "line": 25,
      "has_docstring": true,
      "docstring_preview": "Set up for each test.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "tearDown",
      "line": 32,
      "has_docstring": true,
      "docstring_preview": "Tear down after each test.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "test_help_output",
      "line": 36,
      "has_docstring": true,
      "docstring_preview": "Test that help output works for all main commands.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "test_venice_generate_image_call",
      "line": 62,
      "has_docstring": true,
      "docstring_preview": "Test that calling venice generate command correctly calls the generator and returns the right data.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "test_gitkraken_command_dispatch",
      "line": 78,
      "has_docstring": true,
      "docstring_preview": "Test that GitKraken commands are dispatched and return correct data.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "test_list_available_models_integrator",
      "line": 95,
      "has_docstring": true,
      "docstring_preview": "Test that the integrator correctly calls and processes list_models.",
      "is_async": false
    },
    {
      "file": "test_integration.py",
      "type": "function",
      "name": "test_update_venice_config_call",
      "line": 116,
      "has_docstring": true,
      "docstring_preview": "Test that the update_venice_config call is correctly handled.",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "class",
      "name": "VeniceAIVerifier",
      "line": 34,
      "has_docstring": true,
      "docstring_preview": "\n    A class to verify Venice AI API key and fetch model information.\n    ",
      "methods": []
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIVerifier",
      "name": "verify_api_key",
      "line": 77,
      "has_docstring": true,
      "docstring_preview": "\n        Verify the Venice AI API key by making a simple test request.\n\n        Returns:\n           ",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIVerifier",
      "name": "fetch_models",
      "line": 133,
      "has_docstring": true,
      "docstring_preview": "\n        Fetch the list of available models from Venice AI API.\n\n        Returns:\n            Dictio",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "class",
      "name": "VeniceAIConfigUpdater",
      "line": 172,
      "has_docstring": true,
      "docstring_preview": "\n    A class to generate and update Raycast configuration files with Venice AI models.\n    ",
      "methods": []
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIConfigUpdater",
      "name": "generate_raycast_config",
      "line": 181,
      "has_docstring": true,
      "docstring_preview": "\n        Generate a Raycast configuration file with updated model information.\n\n        Args:\n      ",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIConfigUpdater",
      "name": "update_raycast_config",
      "line": 281,
      "has_docstring": true,
      "docstring_preview": "Updates the Raycast configuration with the latest Venice AI models.\n\n        This method first verif",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "class",
      "name": "VeniceAIImageGenerator",
      "line": 307,
      "has_docstring": true,
      "docstring_preview": "Handles interaction with Venice AI's image generation and upscaling APIs.\n\n    This class provides a",
      "methods": []
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIImageGenerator",
      "name": "generate_image",
      "line": 501,
      "has_docstring": true,
      "docstring_preview": "Generates an image using the Venice AI API.\n\n        This method sends a request to the Venice AI im",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIImageGenerator",
      "name": "upscale_image_bytes",
      "line": 745,
      "has_docstring": true,
      "docstring_preview": "Upscales an image provided as a byte string.\n\n        Args:\n            image_bytes: The raw bytes o",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIImageGenerator",
      "name": "upscale_image_file",
      "line": 808,
      "has_docstring": true,
      "docstring_preview": "Upscales an image from a file path.\n\n        This method reads an image file, sends its content to t",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "method",
      "class": "VeniceAIImageGenerator",
      "name": "list_models",
      "line": 872,
      "has_docstring": true,
      "docstring_preview": "Lists all available models and a filtered list of uncensored models.\n\n        This method makes a si",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "main",
      "line": 904,
      "has_docstring": true,
      "docstring_preview": "Main function to test the enhanced Venice AI integration.",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "verify_api_key",
      "line": 77,
      "has_docstring": true,
      "docstring_preview": "\n        Verify the Venice AI API key by making a simple test request.\n\n        Returns:\n           ",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "fetch_models",
      "line": 133,
      "has_docstring": true,
      "docstring_preview": "\n        Fetch the list of available models from Venice AI API.\n\n        Returns:\n            Dictio",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "generate_raycast_config",
      "line": 181,
      "has_docstring": true,
      "docstring_preview": "\n        Generate a Raycast configuration file with updated model information.\n\n        Args:\n      ",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "update_raycast_config",
      "line": 281,
      "has_docstring": true,
      "docstring_preview": "Updates the Raycast configuration with the latest Venice AI models.\n\n        This method first verif",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "generate_image",
      "line": 501,
      "has_docstring": true,
      "docstring_preview": "Generates an image using the Venice AI API.\n\n        This method sends a request to the Venice AI im",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "upscale_image_bytes",
      "line": 745,
      "has_docstring": true,
      "docstring_preview": "Upscales an image provided as a byte string.\n\n        Args:\n            image_bytes: The raw bytes o",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "upscale_image_file",
      "line": 808,
      "has_docstring": true,
      "docstring_preview": "Upscales an image from a file path.\n\n        This method reads an image file, sends its content to t",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "list_models",
      "line": 872,
      "has_docstring": true,
      "docstring_preview": "Lists all available models and a filtered list of uncensored models.\n\n        This method makes a si",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "wrapper",
      "line": 71,
      "has_docstring": false,
      "docstring_preview": "",
      "is_async": false
    },
    {
      "file": "venice_integration.py",
      "type": "function",
      "name": "wrapper",
      "line": 387,
      "has_docstring": false,
      "docstring_preview": "",
      "is_async": false
    }
  ],
  "statistics": {
    "total_symbols": 161,
    "documented_symbols": 159,
    "documentation_coverage": "98.8%",
    "by_type": {
      "function": {
        "total": 80,
        "documented": 78
      },
      "class": {
        "total": 7,
        "documented": 7
      },
      "method": {
        "total": 74,
        "documented": 74
      }
    }
  }
}